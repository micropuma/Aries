mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfile_dir := $(dir $(mkfile_path))
TARGET   = hw_emu
MODE	 = linux
HOST_ARCH = aarch64
EN_PL = 1
PLATFORM_REPO_PATHS = /usr/xilinx/Vitis/2023.2/base_platforms
PLATFORM = ${PLATFORM_REPO_PATHS}/xilinx_vck190_base_202320_1/xilinx_vck190_base_202320_1.xpfm
XCLBIN   = vck190_aie_base_graph_${TARGET}.xclbin
XSA	 = vck190_aie_base_graph_${TARGET}.xsa
XPFM	 = vck190_xpfm
HOST_EXE = hostexe
HOST_SRCS := ./host/host.cpp
SYSROOT_PATH = /usr/xilinx/petalinux/2023.2
SYSROOT = ${SYSROOT_PATH}/sysroots/cortexa72-cortexa53-xilinx-linux
SDKTARGETSYSROOT = ${SYSROOT}
EDGE_COMMON_SW_PATH = ./
EDGE_COMMON_SW= ${EDGE_COMMON_SW_PATH}/
ROOTFS=${EDGE_COMMON_SW}/rootfs.ext4
IMAGE=${EDGE_COMMON_SW}/Image
TEMP_DIR := ./_x.$(TARGET).xilinx_vck190_base_202320_1
BUILD_DIR := ./build_dir.$(TARGET).xilinx_vck190_base_202320_1
KERNEL_XO :=$(TEMP_DIR)/top.xo
GRAPH   := aie/adf_graph.cpp
LIBADF  = libadf.a
AIE_CMPL_CMD = aiecompiler -platform=${PLATFORM} --target=hw --stacksize=1024 --pl-register-threshold=250 --pl-freq=230  -include="./aie" -include="./aie/layer0" --disable-transform-broadcast-split=false -workdir=./Work ${GRAPH}
AIE_SIM_CMD = aiesimulator --pkg-dir=./Work --dump-vcd foo --profile --output-time-stamp=no --end-wait-time=30
AIE_O = aie_control_xrt.o
GRAPH_O = adf_graph.o
EMU_CMD = ./$(PACKAGE_OUT)/launch_hw_emu.sh
PACKAGE_OUT = ./package.$(TARGET)
RM = rm -f
RMDIR = rm -rf
##########################################################################################################################################################
### DO NOT MODIFY BELOW THIS LINE UNLESS NECESSARY
################################################################################################################################################

CUR_DIR := $(patsubst %/,%,$(dir $(MK_PATH)))

VCC      = v++
VPP_SPEC = system.cfg
VPP_XO_FLAGS += -c --platform $(PLATFORM) --save-temps --optimize 2 -g
VPP_XO_FLAGS += --hls.jobs 8
VPP_XO_FLAGS += -I$(CUR_DIR)/kernel


GCC_FLAGS := -Wall -c \
			 -std=c++14 \
			 -Wno-int-to-pointer-cast \
			 --sysroot=$(SYSROOT) \

GCC_INCLUDES := -I$(SYSROOT)/usr/include/xrt \
				-I./  \
				-I${XILINX_VITIS}/aietools/include \
				-I${XILINX_VITIS}/include \
				-I./aie


GCC_LIB := -ladf_api_xrt -lgcc -lc -lxrt_coreutil \
					 -lxilinxopencl -lpthread -lrt -ldl -lcrypt -lstdc++ \
		   		 -L$(SYSROOT)/usr/lib \
		   		 --sysroot=$(SYSROOT) \
		   		 -L${XILINX_VITIS}/aietools/lib/aarch64.o


CXX := $(XILINX_VITIS)/gnu/aarch64/lin/aarch64-linux/bin/aarch64-linux-gnu-g++


CLFLAGS += -t $(TARGET) --platform $(PLATFORM) --save-temps --optimize 2
ifneq ($(TARGET), hw)
	CLFLAGS += -g
endif
CLFLAGS += --hls.jobs 8
ifeq ($(EN_PL),1)
CLFLAGS += --config $(VPP_SPEC)
endif
CLFLAGS += --clock.defaultFreqHz 220000000

LDCLFLAGS := --vivado.synth.jobs 8 --vivado.impl.jobs 8

.PHONY: clean

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_base_202320_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2023.2/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2023.2/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2023.2/environment-setup-cortexa72-cortexa53-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2023.2/environment-setup-cortexa72-cortexa53-xilinx-linux)

###

all: aie build host package
run: all run_hw_emu
sd_card: all

aie: guard-PLATFORM_REPO_PATHS ${LIBADF}
${LIBADF}: ${GRAPH}
	${AIE_CMPL_CMD}
	@echo "COMPLETE: aie success."

aiesim: ${LIBADF}
	${AIE_SIM_CMD}
	@echo "COMPLETE: aiesim success."

build: $(XSA)
ifeq ($(EN_PL),1)
kernels:$(KERNEL_XO)
$(KERNEL_XO): kernel/hls.cpp
	mkdir -p $(TEMP_DIR)
	$(VCC) $(VPP_XO_FLAGS) -k top --hls.clock 300000000:top $< -o $@ | tee $(TEMP_DIR)/top.log
	@echo "### ***** top compilation done! *****"
$(XSA): ${KERNEL_XO} ${LIBADF}
	mkdir -p $(BUILD_DIR)
	$(VCC) -l $(CLFLAGS) --temp_dir $(BUILD_DIR) $(LDCLFLAGS) -o'$@' $(+) | tee $(BUILD_DIR)/hpc_xclbin.log
else
${XSA}: ${LIBADF}
	${VCC} -g -l $(CLFLAGS) $< -o $@
endif


$(AIE_O): ./Work/ps/c_rts/aie_control_xrt.cpp
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) $@ $<
$(GRAPH_O): $(GRAPH) 
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) $@ $<

host: guard-CXX guard-SDKTARGETSYSROOT ${HOST_EXE}
ifeq ($(EN_PL),1)
${HOST_EXE}: ${AIE_O} $(GRAPH_O)
	$(CXX) $(HOST_SRCS) $(GCC_FLAGS) $(GCC_INCLUDES) -o main.o
	$(CXX) $(AIE_O) $(GRAPH_O) main.o $(GCC_LIB) -o $(HOST_EXE)
	@echo "COMPLETE: Host application created."
else
${HOST_EXE}: ${AIE_O} $(GRAPH_O)
	$(CXX) -o $@ $^ ${GCC_LIB}
endif

package: guard-ROOTFS guard-IMAGE guard-PLATFORM_REPO_PATHS package_${TARGET} 
package_${TARGET}: ${LIBADF} ${XSA} ${HOST_EXE}
	${VCC} -p -t ${TARGET} -f ${PLATFORM} \
		--package.out_dir $(PACKAGE_OUT) \
		--package.rootfs ${ROOTFS} \
		--package.kernel_image ${IMAGE} \
		--package.boot_mode=sd \
		--package.image_format=ext4 \
		--package.defer_aie_run \
		--package.sd_file ${HOST_EXE} ${LIBADF} ${XSA} -o ${XCLBIN}

	@echo "COMPLETE: Package created."

run_hw_emu: launch_hw_emu.sh
launch_hw_emu.sh: package_hw_emu
	$(EMU_CMD)

clean:
	-$(RMDIR) $(HOST_EXE) $(XCLBIN)/{*sw_emu*,*hw_emu*} 
	-$(RMDIR) profile_* TempConfig system_estimate.xtxt *.rpt *.csv *.o *.xo *.xpe *.xsa cfg qemu_dts_files emu_qemu_scripts *.db sim  #*.a  Work aie/*.ll _x*
	-$(RMDIR)  *v++* .Xil emconfig.json dltmp* xmltmp* *.log *.jou *.wcfg *.wdb *bin* *summary* *.BIN *.bif *.exe  *.log *.txt _x
cleanaie: cleansim
	-$(RMDIR) *.a  Work
cleansim:
	-$(RMDIR) aiesimulator_output foo.vcd ISS_RPC_SERVER_PORT
cleantemp:
	-$(RMDIR) ${TEMP_DIR}
cleanhost:
	-$(RMDIR) ${HOST_EXE} ${AIE_O} $(GRAPH_O) main.o
cleanpac:
	-$(RMDIR) mm_${TARGET}.xclbin.package_summary package.${TARGET}
cleanall: clean cleantemp cleansim cleanaie cleanhost cleanpac
	-$(RMDIR) build_dir* sd_card*
	-$(RMDIR) package.hw run_app.sh 
	-$(RMDIR) *xclbin.run_summary qemu-memory-_* emulation _vimage pl* start_simulation.sh *.xclbin
	$(MAKE) -C sw clean